// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fiboN.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Fibos {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class FiboN {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FiboN() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtmaWJvTi5wcm90bxIFZmlib3MiFgoHTnVtYmVyThILCgNmaWIYASABKAUi", 
            "HAoKVGhlTnVtYmVyUxIOCgZyZXN1bHQYASABKAMyOwoJRmlib25hY2NpEi4K", 
            "BUZpYm9OEg4uZmlib3MuTnVtYmVyThoRLmZpYm9zLlRoZU51bWJlclMiADAB", 
            "QhgKEGlvLmdycGMuZXhhbXBsZXOiAgNITFdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Fibos.NumberN), new[]{ "Fib" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fibos.TheNumberS), new[]{ "Result" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NumberN : pb::IMessage<NumberN> {
    private static readonly pb::MessageParser<NumberN> _parser = new pb::MessageParser<NumberN>(() => new NumberN());
    public static pb::MessageParser<NumberN> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fibos.FiboN.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NumberN() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NumberN(NumberN other) : this() {
      fib_ = other.fib_;
    }

    public NumberN Clone() {
      return new NumberN(this);
    }

    public const int FibFieldNumber = 1;
    private int fib_;
    public int Fib {
      get { return fib_; }
      set {
        fib_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NumberN);
    }

    public bool Equals(NumberN other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fib != other.Fib) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Fib != 0) hash ^= Fib.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Fib != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Fib);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Fib != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fib);
      }
      return size;
    }

    public void MergeFrom(NumberN other) {
      if (other == null) {
        return;
      }
      if (other.Fib != 0) {
        Fib = other.Fib;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fib = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TheNumberS : pb::IMessage<TheNumberS> {
    private static readonly pb::MessageParser<TheNumberS> _parser = new pb::MessageParser<TheNumberS>(() => new TheNumberS());
    public static pb::MessageParser<TheNumberS> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fibos.FiboN.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TheNumberS() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TheNumberS(TheNumberS other) : this() {
      result_ = other.result_;
    }

    public TheNumberS Clone() {
      return new TheNumberS(this);
    }

    public const int ResultFieldNumber = 1;
    private long result_;
    public long Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TheNumberS);
    }

    public bool Equals(TheNumberS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0L) hash ^= Result.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Result);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Result != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Result);
      }
      return size;
    }

    public void MergeFrom(TheNumberS other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0L) {
        Result = other.Result;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
