// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fiboN.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Fibos {
  public static class Fibonacci
  {
    static readonly string __ServiceName = "fibos.Fibonacci";

    static readonly Marshaller<global::Fibos.NumberN> __Marshaller_NumberN = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Fibos.NumberN.Parser.ParseFrom);
    static readonly Marshaller<global::Fibos.TheNumberS> __Marshaller_TheNumberS = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Fibos.TheNumberS.Parser.ParseFrom);

    static readonly Method<global::Fibos.NumberN, global::Fibos.TheNumberS> __Method_FiboN = new Method<global::Fibos.NumberN, global::Fibos.TheNumberS>(
        MethodType.ServerStreaming,
        __ServiceName,
        "FiboN",
        __Marshaller_NumberN,
        __Marshaller_TheNumberS);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Fibos.FiboN.Descriptor.Services[0]; }
    }

    // client interface
    public interface IFibonacciClient
    {
      AsyncServerStreamingCall<global::Fibos.TheNumberS> FiboN(global::Fibos.NumberN request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::Fibos.TheNumberS> FiboN(global::Fibos.NumberN request, CallOptions options);
    }

    // server-side interface
    public interface IFibonacci
    {
      Task FiboN(global::Fibos.NumberN request, IServerStreamWriter<global::Fibos.TheNumberS> responseStream, ServerCallContext context);
    }

    // client stub
    public class FibonacciClient : ClientBase, IFibonacciClient
    {
      public FibonacciClient(Channel channel) : base(channel)
      {
      }
      public AsyncServerStreamingCall<global::Fibos.TheNumberS> FiboN(global::Fibos.NumberN request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_FiboN, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Fibos.TheNumberS> FiboN(global::Fibos.NumberN request, CallOptions options)
      {
        var call = CreateCall(__Method_FiboN, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IFibonacci serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_FiboN, serviceImpl.FiboN).Build();
    }

    // creates a new client
    public static FibonacciClient NewClient(Channel channel)
    {
      return new FibonacciClient(channel);
    }

  }
}
#endregion
